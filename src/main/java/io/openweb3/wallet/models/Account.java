/*
 * Wallet API Documentation
 * This is a custody wallet service api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.wallet.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openweb3.wallet.internal.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-03T23:12:49.848473+08:00[Asia/Shanghai]", comments = "Generator version: 7.11.0")
public class Account {
  public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "available_balance";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
  @javax.annotation.Nullable
  private String availableBalance;

  public static final String SERIALIZED_NAME_AVAILABLE_BALANCE_FIAT_AMOUNT = "available_balance_fiat_amount";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE_FIAT_AMOUNT)
  @javax.annotation.Nullable
  private String availableBalanceFiatAmount;

  public static final String SERIALIZED_NAME_AVAILABLE_BALANCE_FIAT_CURRENCY = "available_balance_fiat_currency";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE_FIAT_CURRENCY)
  @javax.annotation.Nullable
  private String availableBalanceFiatCurrency;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  @javax.annotation.Nullable
  private String currency;

  public static final String SERIALIZED_NAME_LOCKED_BALANCE = "locked_balance";
  @SerializedName(SERIALIZED_NAME_LOCKED_BALANCE)
  @javax.annotation.Nullable
  private String lockedBalance;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  @javax.annotation.Nullable
  private BigDecimal rate;

  public Account() {
  }

  public Account availableBalance(@javax.annotation.Nullable String availableBalance) {
    this.availableBalance = availableBalance;
    return this;
  }

  /**
   * available asset balance
   * @return availableBalance
   */
  @javax.annotation.Nullable
  public String getAvailableBalance() {
    return availableBalance;
  }

  public void setAvailableBalance(@javax.annotation.Nullable String availableBalance) {
    this.availableBalance = availableBalance;
  }


  public Account availableBalanceFiatAmount(@javax.annotation.Nullable String availableBalanceFiatAmount) {
    this.availableBalanceFiatAmount = availableBalanceFiatAmount;
    return this;
  }

  /**
   * available balance - the amount of fiat currency
   * @return availableBalanceFiatAmount
   */
  @javax.annotation.Nullable
  public String getAvailableBalanceFiatAmount() {
    return availableBalanceFiatAmount;
  }

  public void setAvailableBalanceFiatAmount(@javax.annotation.Nullable String availableBalanceFiatAmount) {
    this.availableBalanceFiatAmount = availableBalanceFiatAmount;
  }


  public Account availableBalanceFiatCurrency(@javax.annotation.Nullable String availableBalanceFiatCurrency) {
    this.availableBalanceFiatCurrency = availableBalanceFiatCurrency;
    return this;
  }

  /**
   * available balance - fiat currency
   * @return availableBalanceFiatCurrency
   */
  @javax.annotation.Nullable
  public String getAvailableBalanceFiatCurrency() {
    return availableBalanceFiatCurrency;
  }

  public void setAvailableBalanceFiatCurrency(@javax.annotation.Nullable String availableBalanceFiatCurrency) {
    this.availableBalanceFiatCurrency = availableBalanceFiatCurrency;
  }


  public Account currency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Id            string &#x60;json:\&quot;id\&quot;&#x60;
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(@javax.annotation.Nullable String currency) {
    this.currency = currency;
  }


  public Account lockedBalance(@javax.annotation.Nullable String lockedBalance) {
    this.lockedBalance = lockedBalance;
    return this;
  }

  /**
   * freeze balances
   * @return lockedBalance
   */
  @javax.annotation.Nullable
  public String getLockedBalance() {
    return lockedBalance;
  }

  public void setLockedBalance(@javax.annotation.Nullable String lockedBalance) {
    this.lockedBalance = lockedBalance;
  }


  public Account rate(@javax.annotation.Nullable BigDecimal rate) {
    this.rate = rate;
    return this;
  }

  /**
   * exchange rate. e.g.: 1.000293074056343
   * @return rate
   */
  @javax.annotation.Nullable
  public BigDecimal getRate() {
    return rate;
  }

  public void setRate(@javax.annotation.Nullable BigDecimal rate) {
    this.rate = rate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.availableBalance, account.availableBalance) &&
        Objects.equals(this.availableBalanceFiatAmount, account.availableBalanceFiatAmount) &&
        Objects.equals(this.availableBalanceFiatCurrency, account.availableBalanceFiatCurrency) &&
        Objects.equals(this.currency, account.currency) &&
        Objects.equals(this.lockedBalance, account.lockedBalance) &&
        Objects.equals(this.rate, account.rate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableBalance, availableBalanceFiatAmount, availableBalanceFiatCurrency, currency, lockedBalance, rate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    availableBalanceFiatAmount: ").append(toIndentedString(availableBalanceFiatAmount)).append("\n");
    sb.append("    availableBalanceFiatCurrency: ").append(toIndentedString(availableBalanceFiatCurrency)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    lockedBalance: ").append(toIndentedString(lockedBalance)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_balance");
    openapiFields.add("available_balance_fiat_amount");
    openapiFields.add("available_balance_fiat_currency");
    openapiFields.add("currency");
    openapiFields.add("locked_balance");
    openapiFields.add("rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("available_balance") != null && !jsonObj.get("available_balance").isJsonNull()) && !jsonObj.get("available_balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("available_balance").toString()));
      }
      if ((jsonObj.get("available_balance_fiat_amount") != null && !jsonObj.get("available_balance_fiat_amount").isJsonNull()) && !jsonObj.get("available_balance_fiat_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_balance_fiat_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("available_balance_fiat_amount").toString()));
      }
      if ((jsonObj.get("available_balance_fiat_currency") != null && !jsonObj.get("available_balance_fiat_currency").isJsonNull()) && !jsonObj.get("available_balance_fiat_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_balance_fiat_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("available_balance_fiat_currency").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("locked_balance") != null && !jsonObj.get("locked_balance").isJsonNull()) && !jsonObj.get("locked_balance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locked_balance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locked_balance").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

