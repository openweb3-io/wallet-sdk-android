/*
 * Wallet API Documentation
 * This is a custody wallet service api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.wallet.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.openweb3.wallet.models.CurrencyNetwork;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openweb3.wallet.internal.JSON;

/**
 * Currency
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-04T22:33:13.574042+08:00[Asia/Shanghai]", comments = "Generator version: 7.13.0")
public class Currency {
  public static final String SERIALIZED_NAME_CAN_DEPOSIT = "can_deposit";
  @SerializedName(SERIALIZED_NAME_CAN_DEPOSIT)
  @javax.annotation.Nullable
  private Boolean canDeposit;

  public static final String SERIALIZED_NAME_CAN_TRANSFER = "can_transfer";
  @SerializedName(SERIALIZED_NAME_CAN_TRANSFER)
  @javax.annotation.Nullable
  private Boolean canTransfer;

  public static final String SERIALIZED_NAME_CAN_WITHDRAW = "can_withdraw";
  @SerializedName(SERIALIZED_NAME_CAN_WITHDRAW)
  @javax.annotation.Nullable
  private Boolean canWithdraw;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_CONTRACT_ADDRESS = "contract_address";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ADDRESS)
  @javax.annotation.Nullable
  private String contractAddress;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private String createdAt;

  public static final String SERIALIZED_NAME_DECIMALS = "decimals";
  @SerializedName(SERIALIZED_NAME_DECIMALS)
  @javax.annotation.Nullable
  private Integer decimals;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  @javax.annotation.Nullable
  private String logo;

  public static final String SERIALIZED_NAME_MAX_FEE = "max_fee";
  @SerializedName(SERIALIZED_NAME_MAX_FEE)
  @javax.annotation.Nullable
  private String maxFee;

  public static final String SERIALIZED_NAME_MAX_FEE_FOR_CT_ADDR = "max_fee_for_ct_addr";
  @SerializedName(SERIALIZED_NAME_MAX_FEE_FOR_CT_ADDR)
  @javax.annotation.Nullable
  private String maxFeeForCtAddr;

  public static final String SERIALIZED_NAME_MAX_WITHDRAW_AMOUNT = "max_withdraw_amount";
  @SerializedName(SERIALIZED_NAME_MAX_WITHDRAW_AMOUNT)
  @javax.annotation.Nullable
  private String maxWithdrawAmount;

  public static final String SERIALIZED_NAME_MIN_DEPOSIT_AMOUNT = "min_deposit_amount";
  @SerializedName(SERIALIZED_NAME_MIN_DEPOSIT_AMOUNT)
  @javax.annotation.Nullable
  private String minDepositAmount;

  public static final String SERIALIZED_NAME_MIN_FEE = "min_fee";
  @SerializedName(SERIALIZED_NAME_MIN_FEE)
  @javax.annotation.Nullable
  private String minFee;

  public static final String SERIALIZED_NAME_MIN_FEE_FOR_CT_ADDR = "min_fee_for_ct_addr";
  @SerializedName(SERIALIZED_NAME_MIN_FEE_FOR_CT_ADDR)
  @javax.annotation.Nullable
  private String minFeeForCtAddr;

  public static final String SERIALIZED_NAME_MIN_WITHDRAW_AMOUNT = "min_withdraw_amount";
  @SerializedName(SERIALIZED_NAME_MIN_WITHDRAW_AMOUNT)
  @javax.annotation.Nullable
  private String minWithdrawAmount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_NEED_MEMO = "need_memo";
  @SerializedName(SERIALIZED_NAME_NEED_MEMO)
  @javax.annotation.Nullable
  private Boolean needMemo;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  @javax.annotation.Nullable
  private String network;

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  @javax.annotation.Nullable
  private List<CurrencyNetwork> networks = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRECISION = "precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  @javax.annotation.Nullable
  private Integer precision;

  public static final String SERIALIZED_NAME_RATED = "rated";
  @SerializedName(SERIALIZED_NAME_RATED)
  @javax.annotation.Nullable
  private Boolean rated;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  @javax.annotation.Nullable
  private String symbol;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private String updatedAt;

  public Currency() {
  }

  public Currency canDeposit(@javax.annotation.Nullable Boolean canDeposit) {
    this.canDeposit = canDeposit;
    return this;
  }

  /**
   * Get canDeposit
   * @return canDeposit
   */
  @javax.annotation.Nullable
  public Boolean getCanDeposit() {
    return canDeposit;
  }

  public void setCanDeposit(@javax.annotation.Nullable Boolean canDeposit) {
    this.canDeposit = canDeposit;
  }


  public Currency canTransfer(@javax.annotation.Nullable Boolean canTransfer) {
    this.canTransfer = canTransfer;
    return this;
  }

  /**
   * Get canTransfer
   * @return canTransfer
   */
  @javax.annotation.Nullable
  public Boolean getCanTransfer() {
    return canTransfer;
  }

  public void setCanTransfer(@javax.annotation.Nullable Boolean canTransfer) {
    this.canTransfer = canTransfer;
  }


  public Currency canWithdraw(@javax.annotation.Nullable Boolean canWithdraw) {
    this.canWithdraw = canWithdraw;
    return this;
  }

  /**
   * Get canWithdraw
   * @return canWithdraw
   */
  @javax.annotation.Nullable
  public Boolean getCanWithdraw() {
    return canWithdraw;
  }

  public void setCanWithdraw(@javax.annotation.Nullable Boolean canWithdraw) {
    this.canWithdraw = canWithdraw;
  }


  public Currency code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public Currency contractAddress(@javax.annotation.Nullable String contractAddress) {
    this.contractAddress = contractAddress;
    return this;
  }

  /**
   * Get contractAddress
   * @return contractAddress
   */
  @javax.annotation.Nullable
  public String getContractAddress() {
    return contractAddress;
  }

  public void setContractAddress(@javax.annotation.Nullable String contractAddress) {
    this.contractAddress = contractAddress;
  }


  public Currency createdAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
  }


  public Currency decimals(@javax.annotation.Nullable Integer decimals) {
    this.decimals = decimals;
    return this;
  }

  /**
   * Get decimals
   * @return decimals
   */
  @javax.annotation.Nullable
  public Integer getDecimals() {
    return decimals;
  }

  public void setDecimals(@javax.annotation.Nullable Integer decimals) {
    this.decimals = decimals;
  }


  public Currency disabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }


  public Currency id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public Currency logo(@javax.annotation.Nullable String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(@javax.annotation.Nullable String logo) {
    this.logo = logo;
  }


  public Currency maxFee(@javax.annotation.Nullable String maxFee) {
    this.maxFee = maxFee;
    return this;
  }

  /**
   * Get maxFee
   * @return maxFee
   */
  @javax.annotation.Nullable
  public String getMaxFee() {
    return maxFee;
  }

  public void setMaxFee(@javax.annotation.Nullable String maxFee) {
    this.maxFee = maxFee;
  }


  public Currency maxFeeForCtAddr(@javax.annotation.Nullable String maxFeeForCtAddr) {
    this.maxFeeForCtAddr = maxFeeForCtAddr;
    return this;
  }

  /**
   * Get maxFeeForCtAddr
   * @return maxFeeForCtAddr
   */
  @javax.annotation.Nullable
  public String getMaxFeeForCtAddr() {
    return maxFeeForCtAddr;
  }

  public void setMaxFeeForCtAddr(@javax.annotation.Nullable String maxFeeForCtAddr) {
    this.maxFeeForCtAddr = maxFeeForCtAddr;
  }


  public Currency maxWithdrawAmount(@javax.annotation.Nullable String maxWithdrawAmount) {
    this.maxWithdrawAmount = maxWithdrawAmount;
    return this;
  }

  /**
   * Get maxWithdrawAmount
   * @return maxWithdrawAmount
   */
  @javax.annotation.Nullable
  public String getMaxWithdrawAmount() {
    return maxWithdrawAmount;
  }

  public void setMaxWithdrawAmount(@javax.annotation.Nullable String maxWithdrawAmount) {
    this.maxWithdrawAmount = maxWithdrawAmount;
  }


  public Currency minDepositAmount(@javax.annotation.Nullable String minDepositAmount) {
    this.minDepositAmount = minDepositAmount;
    return this;
  }

  /**
   * Get minDepositAmount
   * @return minDepositAmount
   */
  @javax.annotation.Nullable
  public String getMinDepositAmount() {
    return minDepositAmount;
  }

  public void setMinDepositAmount(@javax.annotation.Nullable String minDepositAmount) {
    this.minDepositAmount = minDepositAmount;
  }


  public Currency minFee(@javax.annotation.Nullable String minFee) {
    this.minFee = minFee;
    return this;
  }

  /**
   * Get minFee
   * @return minFee
   */
  @javax.annotation.Nullable
  public String getMinFee() {
    return minFee;
  }

  public void setMinFee(@javax.annotation.Nullable String minFee) {
    this.minFee = minFee;
  }


  public Currency minFeeForCtAddr(@javax.annotation.Nullable String minFeeForCtAddr) {
    this.minFeeForCtAddr = minFeeForCtAddr;
    return this;
  }

  /**
   * Get minFeeForCtAddr
   * @return minFeeForCtAddr
   */
  @javax.annotation.Nullable
  public String getMinFeeForCtAddr() {
    return minFeeForCtAddr;
  }

  public void setMinFeeForCtAddr(@javax.annotation.Nullable String minFeeForCtAddr) {
    this.minFeeForCtAddr = minFeeForCtAddr;
  }


  public Currency minWithdrawAmount(@javax.annotation.Nullable String minWithdrawAmount) {
    this.minWithdrawAmount = minWithdrawAmount;
    return this;
  }

  /**
   * Get minWithdrawAmount
   * @return minWithdrawAmount
   */
  @javax.annotation.Nullable
  public String getMinWithdrawAmount() {
    return minWithdrawAmount;
  }

  public void setMinWithdrawAmount(@javax.annotation.Nullable String minWithdrawAmount) {
    this.minWithdrawAmount = minWithdrawAmount;
  }


  public Currency name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public Currency needMemo(@javax.annotation.Nullable Boolean needMemo) {
    this.needMemo = needMemo;
    return this;
  }

  /**
   * Get needMemo
   * @return needMemo
   */
  @javax.annotation.Nullable
  public Boolean getNeedMemo() {
    return needMemo;
  }

  public void setNeedMemo(@javax.annotation.Nullable Boolean needMemo) {
    this.needMemo = needMemo;
  }


  public Currency network(@javax.annotation.Nullable String network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(@javax.annotation.Nullable String network) {
    this.network = network;
  }


  public Currency networks(@javax.annotation.Nullable List<CurrencyNetwork> networks) {
    this.networks = networks;
    return this;
  }

  public Currency addNetworksItem(CurrencyNetwork networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * Get networks
   * @return networks
   */
  @javax.annotation.Nullable
  public List<CurrencyNetwork> getNetworks() {
    return networks;
  }

  public void setNetworks(@javax.annotation.Nullable List<CurrencyNetwork> networks) {
    this.networks = networks;
  }


  public Currency precision(@javax.annotation.Nullable Integer precision) {
    this.precision = precision;
    return this;
  }

  /**
   * Get precision
   * @return precision
   */
  @javax.annotation.Nullable
  public Integer getPrecision() {
    return precision;
  }

  public void setPrecision(@javax.annotation.Nullable Integer precision) {
    this.precision = precision;
  }


  public Currency rated(@javax.annotation.Nullable Boolean rated) {
    this.rated = rated;
    return this;
  }

  /**
   * Get rated
   * @return rated
   */
  @javax.annotation.Nullable
  public Boolean getRated() {
    return rated;
  }

  public void setRated(@javax.annotation.Nullable Boolean rated) {
    this.rated = rated;
  }


  public Currency symbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
    return this;
  }

  /**
   * Get symbol
   * @return symbol
   */
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(@javax.annotation.Nullable String symbol) {
    this.symbol = symbol;
  }


  public Currency updatedAt(@javax.annotation.Nullable String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Currency currency = (Currency) o;
    return Objects.equals(this.canDeposit, currency.canDeposit) &&
        Objects.equals(this.canTransfer, currency.canTransfer) &&
        Objects.equals(this.canWithdraw, currency.canWithdraw) &&
        Objects.equals(this.code, currency.code) &&
        Objects.equals(this.contractAddress, currency.contractAddress) &&
        Objects.equals(this.createdAt, currency.createdAt) &&
        Objects.equals(this.decimals, currency.decimals) &&
        Objects.equals(this.disabled, currency.disabled) &&
        Objects.equals(this.id, currency.id) &&
        Objects.equals(this.logo, currency.logo) &&
        Objects.equals(this.maxFee, currency.maxFee) &&
        Objects.equals(this.maxFeeForCtAddr, currency.maxFeeForCtAddr) &&
        Objects.equals(this.maxWithdrawAmount, currency.maxWithdrawAmount) &&
        Objects.equals(this.minDepositAmount, currency.minDepositAmount) &&
        Objects.equals(this.minFee, currency.minFee) &&
        Objects.equals(this.minFeeForCtAddr, currency.minFeeForCtAddr) &&
        Objects.equals(this.minWithdrawAmount, currency.minWithdrawAmount) &&
        Objects.equals(this.name, currency.name) &&
        Objects.equals(this.needMemo, currency.needMemo) &&
        Objects.equals(this.network, currency.network) &&
        Objects.equals(this.networks, currency.networks) &&
        Objects.equals(this.precision, currency.precision) &&
        Objects.equals(this.rated, currency.rated) &&
        Objects.equals(this.symbol, currency.symbol) &&
        Objects.equals(this.updatedAt, currency.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canDeposit, canTransfer, canWithdraw, code, contractAddress, createdAt, decimals, disabled, id, logo, maxFee, maxFeeForCtAddr, maxWithdrawAmount, minDepositAmount, minFee, minFeeForCtAddr, minWithdrawAmount, name, needMemo, network, networks, precision, rated, symbol, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Currency {\n");
    sb.append("    canDeposit: ").append(toIndentedString(canDeposit)).append("\n");
    sb.append("    canTransfer: ").append(toIndentedString(canTransfer)).append("\n");
    sb.append("    canWithdraw: ").append(toIndentedString(canWithdraw)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    decimals: ").append(toIndentedString(decimals)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    maxFee: ").append(toIndentedString(maxFee)).append("\n");
    sb.append("    maxFeeForCtAddr: ").append(toIndentedString(maxFeeForCtAddr)).append("\n");
    sb.append("    maxWithdrawAmount: ").append(toIndentedString(maxWithdrawAmount)).append("\n");
    sb.append("    minDepositAmount: ").append(toIndentedString(minDepositAmount)).append("\n");
    sb.append("    minFee: ").append(toIndentedString(minFee)).append("\n");
    sb.append("    minFeeForCtAddr: ").append(toIndentedString(minFeeForCtAddr)).append("\n");
    sb.append("    minWithdrawAmount: ").append(toIndentedString(minWithdrawAmount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    needMemo: ").append(toIndentedString(needMemo)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    rated: ").append(toIndentedString(rated)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_deposit");
    openapiFields.add("can_transfer");
    openapiFields.add("can_withdraw");
    openapiFields.add("code");
    openapiFields.add("contract_address");
    openapiFields.add("created_at");
    openapiFields.add("decimals");
    openapiFields.add("disabled");
    openapiFields.add("id");
    openapiFields.add("logo");
    openapiFields.add("max_fee");
    openapiFields.add("max_fee_for_ct_addr");
    openapiFields.add("max_withdraw_amount");
    openapiFields.add("min_deposit_amount");
    openapiFields.add("min_fee");
    openapiFields.add("min_fee_for_ct_addr");
    openapiFields.add("min_withdraw_amount");
    openapiFields.add("name");
    openapiFields.add("need_memo");
    openapiFields.add("network");
    openapiFields.add("networks");
    openapiFields.add("precision");
    openapiFields.add("rated");
    openapiFields.add("symbol");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Currency
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Currency.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Currency is not found in the empty JSON string", Currency.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Currency.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Currency` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("contract_address") != null && !jsonObj.get("contract_address").isJsonNull()) && !jsonObj.get("contract_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_address").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("max_fee") != null && !jsonObj.get("max_fee").isJsonNull()) && !jsonObj.get("max_fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_fee").toString()));
      }
      if ((jsonObj.get("max_fee_for_ct_addr") != null && !jsonObj.get("max_fee_for_ct_addr").isJsonNull()) && !jsonObj.get("max_fee_for_ct_addr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_fee_for_ct_addr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_fee_for_ct_addr").toString()));
      }
      if ((jsonObj.get("max_withdraw_amount") != null && !jsonObj.get("max_withdraw_amount").isJsonNull()) && !jsonObj.get("max_withdraw_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_withdraw_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_withdraw_amount").toString()));
      }
      if ((jsonObj.get("min_deposit_amount") != null && !jsonObj.get("min_deposit_amount").isJsonNull()) && !jsonObj.get("min_deposit_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min_deposit_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min_deposit_amount").toString()));
      }
      if ((jsonObj.get("min_fee") != null && !jsonObj.get("min_fee").isJsonNull()) && !jsonObj.get("min_fee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min_fee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min_fee").toString()));
      }
      if ((jsonObj.get("min_fee_for_ct_addr") != null && !jsonObj.get("min_fee_for_ct_addr").isJsonNull()) && !jsonObj.get("min_fee_for_ct_addr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min_fee_for_ct_addr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min_fee_for_ct_addr").toString()));
      }
      if ((jsonObj.get("min_withdraw_amount") != null && !jsonObj.get("min_withdraw_amount").isJsonNull()) && !jsonObj.get("min_withdraw_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min_withdraw_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min_withdraw_amount").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if (jsonObj.get("networks") != null && !jsonObj.get("networks").isJsonNull()) {
        JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("networks");
        if (jsonArraynetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networks` to be an array in the JSON string but got `%s`", jsonObj.get("networks").toString()));
          }

          // validate the optional field `networks` (array)
          for (int i = 0; i < jsonArraynetworks.size(); i++) {
            CurrencyNetwork.validateJsonElement(jsonArraynetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Currency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Currency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Currency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Currency.class));

       return (TypeAdapter<T>) new TypeAdapter<Currency>() {
           @Override
           public void write(JsonWriter out, Currency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Currency read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Currency given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Currency
   * @throws IOException if the JSON string is invalid with respect to Currency
   */
  public static Currency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Currency.class);
  }

  /**
   * Convert an instance of Currency to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

