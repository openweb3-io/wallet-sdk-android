/*
 * Wallet API Documentation
 * This is a custody wallet service api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.wallet.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.openweb3.wallet.models.Currency;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openweb3.wallet.internal.JSON;

/**
 * CursorPageCurrency
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-04T22:33:13.574042+08:00[Asia/Shanghai]", comments = "Generator version: 7.13.0")
public class CursorPageCurrency {
  public static final String SERIALIZED_NAME_HAS_NEXT = "has_next";
  @SerializedName(SERIALIZED_NAME_HAS_NEXT)
  @javax.annotation.Nullable
  private Boolean hasNext;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  @javax.annotation.Nullable
  private List<Currency> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_CURSOR = "next_cursor";
  @SerializedName(SERIALIZED_NAME_NEXT_CURSOR)
  @javax.annotation.Nullable
  private String nextCursor;

  public static final String SERIALIZED_NAME_PREV_CURSOR = "prev_cursor";
  @SerializedName(SERIALIZED_NAME_PREV_CURSOR)
  @javax.annotation.Nullable
  private String prevCursor;

  public CursorPageCurrency() {
  }

  public CursorPageCurrency hasNext(@javax.annotation.Nullable Boolean hasNext) {
    this.hasNext = hasNext;
    return this;
  }

  /**
   * Whether there are more items available in the next page.
   * @return hasNext
   */
  @javax.annotation.Nullable
  public Boolean getHasNext() {
    return hasNext;
  }

  public void setHasNext(@javax.annotation.Nullable Boolean hasNext) {
    this.hasNext = hasNext;
  }


  public CursorPageCurrency items(@javax.annotation.Nullable List<Currency> items) {
    this.items = items;
    return this;
  }

  public CursorPageCurrency addItemsItem(Currency itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * List of items in the current page.
   * @return items
   */
  @javax.annotation.Nullable
  public List<Currency> getItems() {
    return items;
  }

  public void setItems(@javax.annotation.Nullable List<Currency> items) {
    this.items = items;
  }


  public CursorPageCurrency nextCursor(@javax.annotation.Nullable String nextCursor) {
    this.nextCursor = nextCursor;
    return this;
  }

  /**
   * The cursor to use for fetching the next page of items.
   * @return nextCursor
   */
  @javax.annotation.Nullable
  public String getNextCursor() {
    return nextCursor;
  }

  public void setNextCursor(@javax.annotation.Nullable String nextCursor) {
    this.nextCursor = nextCursor;
  }


  public CursorPageCurrency prevCursor(@javax.annotation.Nullable String prevCursor) {
    this.prevCursor = prevCursor;
    return this;
  }

  /**
   * The cursor to use for fetching the previous page of items.
   * @return prevCursor
   */
  @javax.annotation.Nullable
  public String getPrevCursor() {
    return prevCursor;
  }

  public void setPrevCursor(@javax.annotation.Nullable String prevCursor) {
    this.prevCursor = prevCursor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CursorPageCurrency cursorPageCurrency = (CursorPageCurrency) o;
    return Objects.equals(this.hasNext, cursorPageCurrency.hasNext) &&
        Objects.equals(this.items, cursorPageCurrency.items) &&
        Objects.equals(this.nextCursor, cursorPageCurrency.nextCursor) &&
        Objects.equals(this.prevCursor, cursorPageCurrency.prevCursor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasNext, items, nextCursor, prevCursor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CursorPageCurrency {\n");
    sb.append("    hasNext: ").append(toIndentedString(hasNext)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    nextCursor: ").append(toIndentedString(nextCursor)).append("\n");
    sb.append("    prevCursor: ").append(toIndentedString(prevCursor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("has_next");
    openapiFields.add("items");
    openapiFields.add("next_cursor");
    openapiFields.add("prev_cursor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CursorPageCurrency
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CursorPageCurrency.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CursorPageCurrency is not found in the empty JSON string", CursorPageCurrency.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CursorPageCurrency.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CursorPageCurrency` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            Currency.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("next_cursor") != null && !jsonObj.get("next_cursor").isJsonNull()) && !jsonObj.get("next_cursor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_cursor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_cursor").toString()));
      }
      if ((jsonObj.get("prev_cursor") != null && !jsonObj.get("prev_cursor").isJsonNull()) && !jsonObj.get("prev_cursor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev_cursor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prev_cursor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CursorPageCurrency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CursorPageCurrency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CursorPageCurrency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CursorPageCurrency.class));

       return (TypeAdapter<T>) new TypeAdapter<CursorPageCurrency>() {
           @Override
           public void write(JsonWriter out, CursorPageCurrency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CursorPageCurrency read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CursorPageCurrency given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CursorPageCurrency
   * @throws IOException if the JSON string is invalid with respect to CursorPageCurrency
   */
  public static CursorPageCurrency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CursorPageCurrency.class);
  }

  /**
   * Convert an instance of CursorPageCurrency to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

